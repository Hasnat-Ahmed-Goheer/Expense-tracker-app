{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chhsy\\\\OneDrive\\\\Documents\\\\My Projects\\\\Web Development\\\\React\\\\Practice\\\\expense-tracker\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = props => {\n  _s();\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n  const [form, setForm] = useState(false);\n  const titleHandler = event => {\n    // console.log(event.target.value);\n    setEnteredTitle(event.target.value);\n  };\n  const amountHandler = event => {\n    // console.log(event.target.value);\n    setEnteredAmount(event.target.value);\n  };\n  const dateHandler = event => {\n    // console.log(event.target.value);\n    setEnteredDate(event.target.value);\n  };\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseData(expenseData);\n    setEnteredTitle('');\n    setEnteredAmount('');\n    setEnteredDate('');\n    // console.log(expenseData);\n  };\n\n  const showFormHandler = () => {\n    setForm(!form);\n    if (form === true) {\n      setForm( /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-expense__control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              onChange: titleHandler,\n              value: enteredTitle,\n              placeholder: \"Enter the Expense Item\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-expense__control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Amount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              placeholder: \"Enter the Amount\",\n              value: enteredAmount,\n              min: \"0.01\",\n              step: \"0.01\",\n              onChange: amountHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"new-expense__control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              min: \"01-01-2019\",\n              max: \"31-12-2022\",\n              placeholder: \"Enter the Date\",\n              value: enteredDate,\n              onChange: dateHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"new-expense__actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Add Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 18\n      }, this));\n    } else {\n      setForm;\n    }\n  };\n\n  // one way of writing the useState hook to call each state change individually and the other is to call all the state changes together as shown below\n  // const [userInput,setUserInput] = useState({\n  //     enteredTitle:'',\n  //     enteredAmount: '',\n  //     enteredDate:'',\n  // });\n  // another way to call the event listener function is the following for every function\n  //    const titleHandler = (event) =>{\n  //   setUserInput({\n  //     ...userInput,\n  //     enteredTitle:event.target.value,\n  //   })\n  // }\n  // const amountHandler = (event) =>{\n  //    setUserInput({\n  //     ...userInput,\n  //     enteredAmount:event.target.value,\n  //   })\n  // }\n  // same for the date too but if the function depends on the previous state then we should not use the above method but instead do it in the form of a function\n  // const dateHandler = (event) =>{\n  //    setUserInput( (prevState) =>{\n  //    return {...prevState,\n  //     enteredDate:event.target.value,}\n  //   })\n  //   this method ensures that the state it receives is always the latest prev snapshot of the state and then we can easily work with it\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: showFormHandler,\n      children: \"Add New Expense\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 13\n  }, this);\n};\n_s(ExpenseForm, \"QJb2IBBt35I7q5AmUUTVkAOxOMA=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","form","setForm","titleHandler","event","target","value","amountHandler","dateHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","showFormHandler"],"sources":["C:/Users/chhsy/OneDrive/Documents/My Projects/Web Development/React/Practice/expense-tracker/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React,{useState} from \"react\";\r\n\r\nimport './ExpenseForm.css'\r\n\r\nconst ExpenseForm = (props) =>{\r\n   \r\n\r\n\r\n    const [enteredTitle,setEnteredTitle] = useState('');\r\n    const [enteredAmount,setEnteredAmount] = useState('');\r\n    const [enteredDate,setEnteredDate] = useState('');\r\n    const [form , setForm] = useState(false);\r\n    const titleHandler = (event) =>{\r\n        // console.log(event.target.value);\r\n        setEnteredTitle(event.target.value)\r\n    }\r\n    const amountHandler = (event) =>{\r\n        // console.log(event.target.value);\r\n        setEnteredAmount(event.target.value);\r\n    }\r\n    const dateHandler = (event) =>{\r\n        // console.log(event.target.value);\r\n        setEnteredDate(event.target.value);\r\n    }\r\n\r\n    const submitHandler = (event) =>{\r\n        event.preventDefault();\r\n        \r\n        const expenseData = {\r\n            title : enteredTitle,\r\n            amount: enteredAmount,\r\n            date: new Date(enteredDate),\r\n        }\r\n        props.onSaveExpenseData(expenseData);\r\n        setEnteredTitle('');\r\n        setEnteredAmount('');\r\n        setEnteredDate('');\r\n        // console.log(expenseData);\r\n    }\r\n    \r\n   const showFormHandler = () =>{\r\n    setForm(!form);\r\n    if(form === true){\r\n        setForm( <form onSubmit={submitHandler}>\r\n        <div className=\"new-expense__controls\">\r\n            <div className=\"new-expense__control\">\r\n                <label >Title</label>\r\n                <input type=\"text\" onChange={titleHandler}  value ={enteredTitle} placeholder=\"Enter the Expense Item\"/>\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n                <label >Amount</label>\r\n                <input type=\"number\" placeholder=\"Enter the Amount\" value={enteredAmount} min='0.01' step='0.01' onChange={amountHandler} />\r\n            </div>\r\n            <div className=\"new-expense__control\">\r\n                <label >Date</label>\r\n                <input type=\"date\" min='01-01-2019' max= '31-12-2022' placeholder=\"Enter the Date\" value={enteredDate} onChange={dateHandler} />\r\n            </div>\r\n        </div>\r\n        <div className=\"new-expense__actions\">\r\n            <button type=\"submit\">Add Expense</button>\r\n        </div>\r\n    </form>)\r\n    }\r\n    else{\r\n        setForm\r\n    }\r\n   }\r\n\r\n     // one way of writing the useState hook to call each state change individually and the other is to call all the state changes together as shown below\r\n    // const [userInput,setUserInput] = useState({\r\n    //     enteredTitle:'',\r\n    //     enteredAmount: '',\r\n    //     enteredDate:'',\r\n    // });\r\n    // another way to call the event listener function is the following for every function\r\n    //    const titleHandler = (event) =>{\r\n    //   setUserInput({\r\n    //     ...userInput,\r\n    //     enteredTitle:event.target.value,\r\n    //   })\r\n    // }\r\n    // const amountHandler = (event) =>{\r\n    //    setUserInput({\r\n    //     ...userInput,\r\n    //     enteredAmount:event.target.value,\r\n    //   })\r\n    // }\r\n    // same for the date too but if the function depends on the previous state then we should not use the above method but instead do it in the form of a function\r\n    // const dateHandler = (event) =>{\r\n    //    setUserInput( (prevState) =>{\r\n    //    return {...prevState,\r\n    //     enteredDate:event.target.value,}\r\n    //   })\r\n    //   this method ensures that the state it receives is always the latest prev snapshot of the state and then we can easily work with it\r\n    \r\n    return (<div>\r\n        <button onClick={showFormHandler}>\r\nAdd New Expense\r\n    </button>\r\n    </div>\r\n    )\r\n\r\n };\r\n\r\n\r\n    export default ExpenseForm;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}