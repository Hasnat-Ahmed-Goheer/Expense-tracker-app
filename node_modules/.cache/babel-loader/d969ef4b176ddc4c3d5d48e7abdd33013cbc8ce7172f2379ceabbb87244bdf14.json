{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chhsy\\\\OneDrive\\\\Documents\\\\My Projects\\\\Web Development\\\\React\\\\Practice\\\\expense-tracker\\\\src\\\\components\\\\NewExpense\\\\ExpenseForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './ExpenseForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpenseForm = props => {\n  _s();\n  const [enteredTitle, setEnteredTitle] = useState('');\n  const [enteredAmount, setEnteredAmount] = useState('');\n  const [enteredDate, setEnteredDate] = useState('');\n  const [form, setForm] = useState('');\n  const titleHandler = event => {\n    // console.log(event.target.value);\n    setEnteredTitle(event.target.value);\n  };\n  const amountHandler = event => {\n    // console.log(event.target.value);\n    setEnteredAmount(event.target.value);\n  };\n  const dateHandler = event => {\n    // console.log(event.target.value);\n    setEnteredDate(event.target.value);\n  };\n  const submitHandler = event => {\n    event.preventDefault();\n    const expenseData = {\n      title: enteredTitle,\n      amount: enteredAmount,\n      date: new Date(enteredDate)\n    };\n    props.onSaveExpenseData(expenseData);\n    setEnteredTitle('');\n    setEnteredAmount('');\n    setEnteredDate('');\n    // console.log(expenseData);\n  };\n\n  const FormCreateHandler = () => {\n    setForm(() => {\n      form;\n      return;\n    });\n  };\n\n  // one way of writing the useState hook to call each state change individually and the other is to call all the state changes together as shown below\n  // const [userInput,setUserInput] = useState({\n  //     enteredTitle:'',\n  //     enteredAmount: '',\n  //     enteredDate:'',\n  // });\n  // another way to call the event listener function is the following for every function\n  //    const titleHandler = (event) =>{\n  //   setUserInput({\n  //     ...userInput,\n  //     enteredTitle:event.target.value,\n  //   })\n  // }\n  // const amountHandler = (event) =>{\n  //    setUserInput({\n  //     ...userInput,\n  //     enteredAmount:event.target.value,\n  //   })\n  // }\n  // same for the date too but if the function depends on the previous state then we should not use the above method but instead do it in the form of a function\n  // const dateHandler = (event) =>{\n  //    setUserInput( (prevState) =>{\n  //    return {...prevState,\n  //     enteredDate:event.target.value,}\n  //   })\n  //   this method ensures that the state it receives is always the latest prev snapshot of the state and then we can easily work with it\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: FormCreateHandler,\n    children: \"Add New Expense\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 13\n  }, this);\n};\n_s(ExpenseForm, \"m6R++YpuYQ0hHefvXcC0NaUl4NA=\");\n_c = ExpenseForm;\nexport default ExpenseForm;\nvar _c;\n$RefreshReg$(_c, \"ExpenseForm\");","map":{"version":3,"names":["React","useState","ExpenseForm","props","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","form","setForm","titleHandler","event","target","value","amountHandler","dateHandler","submitHandler","preventDefault","expenseData","title","amount","date","Date","onSaveExpenseData","FormCreateHandler"],"sources":["C:/Users/chhsy/OneDrive/Documents/My Projects/Web Development/React/Practice/expense-tracker/src/components/NewExpense/ExpenseForm.js"],"sourcesContent":["import React,{useState} from \"react\";\r\n\r\nimport './ExpenseForm.css'\r\n\r\nconst ExpenseForm = (props) =>{\r\n   \r\n\r\n\r\n    const [enteredTitle,setEnteredTitle] = useState('');\r\n    const [enteredAmount,setEnteredAmount] = useState('');\r\n    const [enteredDate,setEnteredDate] = useState('');\r\n    const [form ,setForm] = useState('');\r\n\r\n    const titleHandler = (event) =>{\r\n        // console.log(event.target.value);\r\n        setEnteredTitle(event.target.value)\r\n    }\r\n    const amountHandler = (event) =>{\r\n        // console.log(event.target.value);\r\n        setEnteredAmount(event.target.value);\r\n    }\r\n    const dateHandler = (event) =>{\r\n        // console.log(event.target.value);\r\n        setEnteredDate(event.target.value);\r\n    }\r\n\r\n    const submitHandler = (event) =>{\r\n        event.preventDefault();\r\n        \r\n        const expenseData = {\r\n            title : enteredTitle,\r\n            amount: enteredAmount,\r\n            date: new Date(enteredDate),\r\n        }\r\n        props.onSaveExpenseData(expenseData);\r\n        setEnteredTitle('');\r\n        setEnteredAmount('');\r\n        setEnteredDate('');\r\n        // console.log(expenseData);\r\n    }\r\n    \r\n    const FormCreateHandler = () =>{\r\nsetForm(() =>{\r\n    form\r\n    return \r\n})\r\n\r\n    }\r\n\r\n     // one way of writing the useState hook to call each state change individually and the other is to call all the state changes together as shown below\r\n    // const [userInput,setUserInput] = useState({\r\n    //     enteredTitle:'',\r\n    //     enteredAmount: '',\r\n    //     enteredDate:'',\r\n    // });\r\n    // another way to call the event listener function is the following for every function\r\n    //    const titleHandler = (event) =>{\r\n    //   setUserInput({\r\n    //     ...userInput,\r\n    //     enteredTitle:event.target.value,\r\n    //   })\r\n    // }\r\n    // const amountHandler = (event) =>{\r\n    //    setUserInput({\r\n    //     ...userInput,\r\n    //     enteredAmount:event.target.value,\r\n    //   })\r\n    // }\r\n    // same for the date too but if the function depends on the previous state then we should not use the above method but instead do it in the form of a function\r\n    // const dateHandler = (event) =>{\r\n    //    setUserInput( (prevState) =>{\r\n    //    return {...prevState,\r\n    //     enteredDate:event.target.value,}\r\n    //   })\r\n    //   this method ensures that the state it receives is always the latest prev snapshot of the state and then we can easily work with it\r\n    \r\n    return (<button onClick={FormCreateHandler}>\r\nAdd New Expense\r\n    </button>)\r\n\r\n };\r\n\r\n\r\n    export default ExpenseForm;"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AAEpC,OAAO,mBAAmB;AAAA;AAE1B,MAAMC,WAAW,GAAIC,KAAK,IAAI;EAAA;EAI1B,MAAM,CAACC,YAAY,EAACC,eAAe,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACnD,MAAM,CAACK,aAAa,EAACC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACrD,MAAM,CAACO,WAAW,EAACC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACjD,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMW,YAAY,GAAIC,KAAK,IAAI;IAC3B;IACAR,eAAe,CAACQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACvC,CAAC;EACD,MAAMC,aAAa,GAAIH,KAAK,IAAI;IAC5B;IACAN,gBAAgB,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACxC,CAAC;EACD,MAAME,WAAW,GAAIJ,KAAK,IAAI;IAC1B;IACAJ,cAAc,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACtC,CAAC;EAED,MAAMG,aAAa,GAAIL,KAAK,IAAI;IAC5BA,KAAK,CAACM,cAAc,EAAE;IAEtB,MAAMC,WAAW,GAAG;MAChBC,KAAK,EAAGjB,YAAY;MACpBkB,MAAM,EAAEhB,aAAa;MACrBiB,IAAI,EAAE,IAAIC,IAAI,CAAChB,WAAW;IAC9B,CAAC;IACDL,KAAK,CAACsB,iBAAiB,CAACL,WAAW,CAAC;IACpCf,eAAe,CAAC,EAAE,CAAC;IACnBE,gBAAgB,CAAC,EAAE,CAAC;IACpBE,cAAc,CAAC,EAAE,CAAC;IAClB;EACJ,CAAC;;EAED,MAAMiB,iBAAiB,GAAG,MAAK;IACnCf,OAAO,CAAC,MAAK;MACTD,IAAI;MACJ;IACJ,CAAC,CAAC;EAEE,CAAC;;EAEA;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAQ;IAAQ,OAAO,EAAEgB,iBAAkB;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAElC;AAEZ,CAAC;AAAC,GA5EGxB,WAAW;AAAA,KAAXA,WAAW;AA+Eb,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}